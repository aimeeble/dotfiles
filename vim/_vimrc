" see http://www.8t8.us/configs/vimrc
" see http://eseth.org/filez/prefs/vimrc
" see https://github.com/erynofwales/dotfiles/blob/master/vimrc

syn off
filetype off
call pathogen#infect()

" General {{{
set nocompatible                 " vi is old, vim is new.
if has("gui") && has("win32")    " make alt-space work in windows
   noremap <M-Space> :simalt ~<CR>
   inoremap <M-Space> <C-O>:simalt ~<CR>
   cnoremap <M-Space> <C-O>:simalt ~<CR>
endif
set nobackup
set ttyfast                      " faster redraw on new computers
set showcmd                      " show typed commands
set showmode                     " show editing mode

set enc=utf-8
" }}}

" Searching {{{
set wildmode=longest,list        " make tab work like bash tab completion
set wildignore+=*.o,*~,*.pyc
set nohls                        " don't highlight search results
set is                           " search as you type
set ignorecase                   " ignore case during search...
set smartcase                    " ...unless you change case, then respect it
set gdefault                     " apply substitution to all occurrences
" }}}

" Colours {{{
color darkblue
set bg=light                     " fixes up some colours to be better
set bg=dark                      " fix (cont.)
hi CursorLine guibg=#000080 term=underline cterm=underline
hi CursorLineNr guifg=#00ff00
hi LineNr guifg=#008000
hi SpecialKey guifg=#0030b0
hi NonText guifg=#0030b0
" }}}

" Decoration {{{
set cmdheight=1                  " command editor only 1 row
set laststatus=2                 " always show the status bar
set cursorline                   " highlight current line
set nu                           " line numbering
set list                         " enable whitespace display
set listchars=tab:>…,trail:-,extends:>,precedes:<,eol:¬
set statusline=%f\ %{fugitive#statusline()}%=%30(%=b%n\ %y%m%r%w\ %l,%c%V\ %P\%)
set title                        " update terminal title bar
" }}}

" Editing {{{
syn on                           " syntax highlighting on
filetype on                      " detect the file type
set showmatch                    " highlight matching brace
set tabstop=8                    " tab stops set to 8 columns
set shiftwidth=4                 " auto-indent width
set softtabstop=4                " treat as a single tab wrt backspace                 testing long line colouring.... asdjfaskjf djla jdf
set expandtab                    " use spaces instead of tab character
set nowrap                       " do not wrap long lines
set shiftround                   " auto-indent to multiples of shiftwidth
set sidescroll=1                 " scroll horizontally 1 cols at a time
set sidescrolloff=15             " 15 cols between cursor and screen edge causes scroll
set scrolloff=2                  " 2 rows between cursor and screen edge
set hidden                       " allow unsaved bufs in the background
set backspace=indent,eol,start   " allow BS over them all
set textwidth=0                  " no auto line wrap
if has("win32")
   set directory=$TMP
else
   set directory=~/tmp,/tmp      " .swp files go here
endif

set fo+=n                        " format numbered lists properly
set flp=^\\s*#\\=\\d\\+[\\]:.)}\\t\ ]\\s*
                                 " standard + allow preceding number sign.

" Move around by screen lines instead of file lines
nnoremap j gj
nnoremap k gk

inoremap jj <ESC>

" spell checking
set spellfile=~/.vim/words.add
set spelllang=en_us

" indent based on type
if has("autocmd")
   filetype plugin on

   " recognize SCons files as Python
   au BufNewFile,BufRead,BufEnter *.sc setf python
   au BufNewFile,BufRead,BufEnter *.proto setf proto
   au BufNewFile,BufRead,BufEnter *.ldg,*.ledger setf ledger
   au BufNewFile,BufRead,BufEnter BUILD setf python
endif

" highlight in yellow things after 80 columns
" **NOTE** this slows things down considerably in some files.
"hi rightWarnMargin guibg=#505000
"match rightWarnMargin '\%>80v.\+'
"au BufEnter * let w:m1=matchadd('rightWarnMargin', '\%>80v.\+', -1)

" highlight in red things after 90 columns
"hi rightMargin guibg=#500000
"match rightMargin '\%>90v.\+'
"au BufEnter * let w:m1=matchadd('rightMargin', '\%>90v.\+', -1)
if exists("+colorcolumn")
   " draw a line at 80 columns
   set colorcolumn=80
   hi ColorColumn guibg=#000050
endif
" }}}

" GUI Options {{{
set guioptions-=m                " menu
set guioptions-=T                " toolbar
set guioptions-=rL               " scrollbars
if has("mac")
   set guifont=Inconsolata\ Regular:h13
elseif has("linux")
   set guifont=Terminus\ Bold\ 12
elseif has("win32")
   set guifont=Terminus:h12:b:cANSI
endif
" }}}

if has("autocmd")
   filetype plugin indent on
else
   set autoindent
endif

" Keybindings {{{
" Toggle spellcheck
map <silent> <F8> :set nospell!<CR>:set nospell?<CR>

" Toggle NERDTree file browser
map <F4> :NERDTreeToggle<CR>

" Paste mode
set pastetoggle=<F5>
" }}}

" Macros {{{
function! VMcomment()
   let last=line(".")
   execute "normal v/(\<CR>hykkO\<CR>/*\<CR>\<BS>\<ESC>"
   execute "normal 76a-\<ESC>"
   execute "normal A\<CR>*\<CR>\<ESC>"
   execute "normal A \<ESC>pA --\<CR>\<CR>\<ESC>"
   execute "normal 76a-\<ESC>"
   execute "normal A\<CR>*/"
   return last+8
endfunction

map ,vmc :exec VMcomment()<cr>
" }}}

" Settings...
let g:yankring_history_dir = "$HOME/.vim"
let g:ledger_maxwidth = 80
let g:session_autoload = 'no'

if exists("~/.vimrc-local")
   source ~/.vimrc-local
endif
